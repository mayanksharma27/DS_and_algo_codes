//https://www.hackerrank.com/challenges/ctci-connected-cell-in-a-grid/problem
#include <bits/stdc++.h>

using namespace std;

// Complete the maxRegion function below.
int dfs(int i, int j,vector<vector<int>>grid,vector<vector<int>> &visited){
    int count =0;
    pair<int,int> p ;
    stack<pair<int,int>> s;
    s.push(pair<int,int>(i,j));
    visited[i][j]=1;
    count++;
    while(!s.empty()){
        p = s.top();
        s.pop();
        i = p.first; j = p.second;
        if(i-1>=0){
            if(grid[i-1][j] && !visited[i-1][j]){
              s.push(pair<int, int>(i-1, j));
              visited[i-1][j] = 1;
              count++;
            }
            if(j-1>=0){
              if (grid[i - 1][j-1] && !visited[i-1][j-1]) {
                s.push(pair<int, int>(i - 1, j-1));
                visited[i - 1][j-1] = 1;
                count++;
              }
            }
            if (j + 1< grid[i-1].size()) {
              if (grid[i - 1][j + 1] && !visited[i - 1][j + 1]) {
                s.push(pair<int, int>(i - 1, j + 1));
                visited[i - 1][j + 1] = 1;
                count++;
              }
            }
        }
        if (j - 1 >= 0) {
          if (grid[i][j - 1] && !visited[i][j - 1]) {
            s.push(pair<int, int>(i, j - 1));
            visited[i][j - 1] = 1;
            count++;
          }
        }
        if (j + 1 < grid[i].size()) {
          if (grid[i][j + 1] && !visited[i][j + 1]) {
            s.push(pair<int, int>(i, j + 1));
            visited[i][j + 1] = 1;
            count++;
          }
        }
        if (i + 1 < grid.size()) {
          if (grid[i + 1][j] && !visited[i + 1][j]) {
            s.push(pair<int, int>(i + 1, j));
            visited[i + 1][j] = 1;
            count++;
          }
          if (j - 1 >= 0) {
            if (grid[i + 1][j - 1] && !visited[i + 1][j - 1]) {
              s.push(pair<int, int>(i + 1, j - 1));
              visited[i + 1][j - 1] = 1;
              count++;
            }
          }
          if (j + 1 < grid[i + 1].size()) {
            if (grid[i + 1][j + 1] && !visited[i + 1][j + 1]) {
              s.push(pair<int, int>(i + 1, j + 1));
              visited[i + 1][j + 1] = 1;
              count++;
            }
          }
        }
    }
    return count;
}

int maxRegion(vector<vector<int>> grid) {
    vector<vector<int>>visited(10,vector<int>(10,0));
    int i,j,max=0,res;
    for(i=0;i<grid.size()){
        for(j=0;j<grid[i].size();j++){
          if (grid[i][j] && !visited[i][j]){
              res = dfs(i,j,grid, visited);
              max = max < res ? res : max;
          }         
        }
            
    }
    return max;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> grid(n);
    for (int i = 0; i < n; i++) {
        grid[i].resize(m);

        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int res = maxRegion(grid);

    fout << res << "\n";

    fout.close();

    return 0;
}
